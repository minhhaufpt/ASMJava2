/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ps24488.asm;

import java.awt.Font;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ps24488.dataUser.Employee;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author NguyenMinhHau_PS24488
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    Locale localeEN = new Locale("en", "EN");
    NumberFormat en = NumberFormat.getInstance(localeEN);
    Font bigFont = new Font("TimeNewRoman", Font.PLAIN, 16); // or whatever
    ArrayList<Employee> epy = new ArrayList<Employee>();
    int index = 0;
    String filePath = "";

    public void clock() {
        new Thread() {
            public void run() {
                while (true) {
                    try {
                        Date now = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat();
                        sdf.applyPattern("hh:mm:ss aa");
                        String time = sdf.format(now);
                        thoigian.setText(time);
                        Thread.sleep(990);

                    } catch (Exception e) {
                        break;
                    }
                }
            }
        }.start();

    }

    public void data() {
        epy.add(new Employee("PS24488", "Nguyễn Minh Hậu", "haunguyen2k3@gmail.com", 100000000, 19, new ImageIcon("image\\anh2.jpg")));
        epy.add(new Employee("PS13355", "lê Thị Kim Tiền", "tienle2k3@gmail.com", 80000000, 19, new ImageIcon("image\\anh3.jpg")));
    }

    public main() throws IOException {
        initComponents();
        setLocationRelativeTo(null);
        tbldata.getTableHeader().setFont(bigFont);
        tbldata.setShowVerticalLines(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtmanv = new javax.swing.JTextField();
        txthvt = new javax.swing.JTextField();
        txttuoi = new javax.swing.JTextField();
        txtemail = new javax.swing.JTextField();
        txtluong = new javax.swing.JTextField();
        pndieukhien = new javax.swing.JPanel();
        btnsaveas = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnfind = new javax.swing.JButton();
        btnopen = new javax.swing.JButton();
        btnnew1 = new javax.swing.JButton();
        btnsavefile = new javax.swing.JButton();
        btnnright = new javax.swing.JButton();
        btnnleft = new javax.swing.JButton();
        btnend = new javax.swing.JButton();
        btnstart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbldata = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        labrecord = new javax.swing.JLabel();
        thoigian = new javax.swing.JLabel();
        btnexit = new javax.swing.JButton();
        cbsx = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        anh = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lí nhân viên");
        setIconImage(new ImageIcon("icon.png").getImage());
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lí nhân viên");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Mã nhân viên");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Họ và tên");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Tuổi");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Email");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Lương");

        txtmanv.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtmanv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmanvActionPerformed(evt);
            }
        });

        txthvt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txttuoi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtemail.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtluong.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtluong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtluongMouseClicked(evt);
            }
        });
        txtluong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtluongKeyPressed(evt);
            }
        });

        pndieukhien.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pndieukhien.setToolTipText("");

        btnsaveas.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnsaveas.setText("Creat");
        btnsaveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveasActionPerformed(evt);
            }
        });

        btnsave.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        btndelete.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnfind.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnfind.setText("Find");
        btnfind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfindActionPerformed(evt);
            }
        });

        btnopen.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnopen.setText("Open file");
        btnopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnopenActionPerformed(evt);
            }
        });

        btnnew1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnnew1.setText("New");
        btnnew1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnew1ActionPerformed(evt);
            }
        });

        btnsavefile.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnsavefile.setText("Save file");
        btnsavefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsavefileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pndieukhienLayout = new javax.swing.GroupLayout(pndieukhien);
        pndieukhien.setLayout(pndieukhienLayout);
        pndieukhienLayout.setHorizontalGroup(
            pndieukhienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pndieukhienLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pndieukhienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnsavefile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnsaveas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnsave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnnew1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnfind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnopen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        pndieukhienLayout.setVerticalGroup(
            pndieukhienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pndieukhienLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnnew1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnsave, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnsaveas, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnfind, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnopen, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnsavefile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        btnnright.setFont(new java.awt.Font("SimSun-ExtB", 1, 18)); // NOI18N
        btnnright.setText("-->");
        btnnright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnrightActionPerformed(evt);
            }
        });

        btnnleft.setFont(new java.awt.Font("SimSun-ExtB", 1, 18)); // NOI18N
        btnnleft.setText("<--");
        btnnleft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnleftActionPerformed(evt);
            }
        });

        btnend.setFont(new java.awt.Font("SimSun-ExtB", 1, 18)); // NOI18N
        btnend.setText("-->|");
        btnend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnendActionPerformed(evt);
            }
        });

        btnstart.setFont(new java.awt.Font("SimSun-ExtB", 1, 18)); // NOI18N
        btnstart.setText("|<--");
        btnstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnstartActionPerformed(evt);
            }
        });

        tbldata.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        tbldata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Họ và tên", "Tuổi", "Email", "Lương"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbldata.setRowHeight(30);
        tbldata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbldataMouseClicked(evt);
            }
        });
        tbldata.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbldataKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbldata);
        if (tbldata.getColumnModel().getColumnCount() > 0) {
            tbldata.getColumnModel().getColumn(0).setMinWidth(150);
            tbldata.getColumnModel().getColumn(0).setPreferredWidth(150);
            tbldata.getColumnModel().getColumn(0).setMaxWidth(150);
            tbldata.getColumnModel().getColumn(2).setMinWidth(50);
            tbldata.getColumnModel().getColumn(2).setPreferredWidth(50);
            tbldata.getColumnModel().getColumn(2).setMaxWidth(50);
            tbldata.getColumnModel().getColumn(4).setMinWidth(200);
            tbldata.getColumnModel().getColumn(4).setPreferredWidth(200);
            tbldata.getColumnModel().getColumn(4).setMaxWidth(200);
        }

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 51));
        jLabel7.setText("Record : ");

        labrecord.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labrecord.setForeground(new java.awt.Color(255, 0, 51));

        thoigian.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        thoigian.setForeground(new java.awt.Color(255, 0, 51));

        btnexit.setBackground(new java.awt.Color(255, 204, 204));
        btnexit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnexit.setForeground(new java.awt.Color(0, 0, 255));
        btnexit.setText("Exit");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        cbsx.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        cbsx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tăng dần", "Giảm dần" }));

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton1.setText("Theo Tên");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton2.setText("Theo lương");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        anh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setText("Thay đổi");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnnleft, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(btnnright, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnend, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel7)
                                        .addGap(1, 1, 1)
                                        .addComponent(labrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbsx, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(thoigian, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pndieukhien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(anh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jButton3)
                                                    .addGap(32, 32, 32)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtmanv, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                                        .addComponent(txthvt, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txttuoi, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtemail, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtluong, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addGap(42, 42, 42)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnstart, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2))))
                            .addContainerGap(192, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(22, 22, 22)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thoigian, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtmanv, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txthvt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txttuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtemail, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtluong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnnright, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnnleft, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnend, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnstart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(anh, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbsx, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(pndieukhien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtmanvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmanvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmanvActionPerformed

    private void btnsaveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveasActionPerformed
        addEmployee();
    }//GEN-LAST:event_btnsaveasActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        removeEmployee();
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnstartActionPerformed
        try {
            endleft();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnstartActionPerformed

    private void btnopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnopenActionPerformed
        filePath = "";
        try {
            JFileChooser c = new JFileChooser();
            int rVal = c.showOpenDialog(null);
            if (rVal != JFileChooser.CANCEL_OPTION) {
                if (rVal == JFileChooser.APPROVE_OPTION) {
                    String filename = c.getSelectedFile().getName();
                    String dir = c.getCurrentDirectory().toString();
                    filePath = dir + "\\" + filename;
                }
                epy = (ArrayList<Employee>) docOb(filePath);
                fillToTable();
                showDetail(0);
                record();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "File rỗng hoặc không phù hợp ", "Lỗi open file", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnopenActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        updateEmployee();
    }//GEN-LAST:event_btnsaveActionPerformed

    private void tbldataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbldataMouseClicked
        if (tbldata.getSelectedRow() != index) {
            showDetail();
            record();
        } else {
            tbldata.getSelectionModel().clearSelection();
            clearForm();
            record();
        }
    }//GEN-LAST:event_tbldataMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        clock();
        fillToTable();
        record();

    }//GEN-LAST:event_formWindowOpened

    private void btnfindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfindActionPerformed
        String id = txtmanv.getText();
        id.trim();
        try {
            if (id.equals("")) {
                String text = JOptionPane.showInputDialog(this, "Nhập mã nhân viên cần tìm", "Tìm nhân viên", JOptionPane.OK_CANCEL_OPTION);
                if (!text.equals("")) {
                    if (text != null) {
                        if (findID(text) == -1) {
                            JOptionPane.showMessageDialog(this, "Mã nhân viên bạn tìm không có", "Tìm nhân viên", JOptionPane.ERROR_MESSAGE);
                        } else {
                            showDetail(findID(text));
                            JOptionPane.showMessageDialog(this, "Đã tìm thấy nhân viên có mã " + text, "Tìm nhân viên", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                }
            } else if (findID(id) == -1) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên bạn tìm không có", "Tìm nhân viên", JOptionPane.ERROR_MESSAGE);
            } else {
                showDetail(findID(id));
                JOptionPane.showMessageDialog(this, "Đã tìm thấy nhân viên có mã " + id, "Tìm nhân viên", JOptionPane.PLAIN_MESSAGE);
            }
            record();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_btnfindActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        try {
            int result = JOptionPane.showConfirmDialog(null, "Bạn có muốn lưu file trước khi thoát không", "Cảnh báo", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                ghiOb(filePath, epy);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi không thể lưu file hoặc không có file để lưu", "Error", JOptionPane.ERROR_MESSAGE);
        }
        System.exit(0);
    }//GEN-LAST:event_btnexitActionPerformed

    private void btnnew1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnew1ActionPerformed
        if (isValue2()) {
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để làm mới", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        }
        tbldata.getSelectionModel().clearSelection();
        record();
    }//GEN-LAST:event_btnnew1ActionPerformed

    private void btnnrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnrightActionPerformed
        try {
            right();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnnrightActionPerformed

    private void btnnleftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnleftActionPerformed
        try {
            left();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnnleftActionPerformed

    private void btnendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnendActionPerformed
        try {
            endright();;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnendActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        record();
    }//GEN-LAST:event_formPropertyChange

    private void txtluongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtluongMouseClicked
        String luong = String.valueOf(txtluong.getText()).replace(",", "");
        luong.trim();
        txtluong.setText(luong);
    }//GEN-LAST:event_txtluongMouseClicked

    private void txtluongKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtluongKeyPressed

    }//GEN-LAST:event_txtluongKeyPressed

    private void btnsavefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsavefileActionPerformed
        try {
            String filePathsave = "";
            JFileChooser c = new JFileChooser();
            int rVal = c.showSaveDialog(null);
            if (rVal != JFileChooser.CANCEL_OPTION) {
                if (rVal == JFileChooser.APPROVE_OPTION) {
                    String filename = c.getSelectedFile().getName();
                    String dir = c.getCurrentDirectory().toString();
                    filePathsave = dir + "\\" + filename;
                }
                if (filePath.equalsIgnoreCase(filePathsave)) {
                    int result = JOptionPane.showConfirmDialog(null, "File này đã có sẵn bạn có muốn lưu lại hay không", "Cảnh báo", JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.YES_OPTION) {
                        ghiOb(filePath, epy);
                        JOptionPane.showMessageDialog(this, "Lưu file thành công", "Lưu file", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    ghiOb(filePathsave, epy);
                    JOptionPane.showMessageDialog(this, "Lưu file mới thành công", "Lưu file", JOptionPane.PLAIN_MESSAGE);
                }

            } else {
                int result = JOptionPane.showConfirmDialog(null, "Có lưu lại trên file cũ hay không ?", "Cảnh báo", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    ghiOb(filePath, epy);
                    JOptionPane.showMessageDialog(this, "Lưu file thành công", "Lưu file", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Xảy ra lỗi trong lúc lưu file", "Lỗi lưu file", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnsavefileActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            orderBy("luong");
            fillToTable();
            tbldata.setRowSelectionInterval(0, 0);
            showDetail(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để sắp xếp", "Lỗi sắp xếp", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            orderBy("ten");
            fillToTable();
            tbldata.setRowSelectionInterval(0, 0);
            showDetail(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để sắp xếp", "Lỗi sắp xếp", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String fileanh = "";
        try {
            JFileChooser c = new JFileChooser();
            int rVal = c.showOpenDialog(null);
            if (rVal != JFileChooser.CANCEL_OPTION) {
                if (rVal == JFileChooser.OPEN_DIALOG) {
                    String filename = c.getSelectedFile().getName();
                    String dir = c.getCurrentDirectory().toString();
                    fileanh = dir + "\\" + filename;
                }
                anh.setIcon(new ImageIcon(fileanh));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ảnh bị lỗi", "Lỗi ảnh", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tbldataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbldataKeyReleased

        showDetail();
        record();

    }//GEN-LAST:event_tbldataKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new main().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel anh;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnend;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnfind;
    private javax.swing.JButton btnnew1;
    private javax.swing.JButton btnnleft;
    private javax.swing.JButton btnnright;
    private javax.swing.JButton btnopen;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnsaveas;
    private javax.swing.JButton btnsavefile;
    private javax.swing.JButton btnstart;
    private javax.swing.JComboBox<String> cbsx;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labrecord;
    private javax.swing.JPanel pndieukhien;
    private javax.swing.JTable tbldata;
    private javax.swing.JLabel thoigian;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txthvt;
    private javax.swing.JTextField txtluong;
    private javax.swing.JTextField txtmanv;
    private javax.swing.JTextField txttuoi;
    // End of variables declaration//GEN-END:variables

    private void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tbldata.getModel();
        model.setRowCount(0);
        for (Employee x : epy) {
            Object[] em = {x.getManv(), x.getHovaten(), x.getTuoi(), x.getEmail(), x.getLuong()};
            model.addRow(em);
        }

    }

    private void showDetail() {
        index = tbldata.getSelectedRow();
        Employee em = epy.get(index);
        txtmanv.setText(em.getManv());
        txthvt.setText(em.getHovaten());
        txttuoi.setText(String.valueOf(em.getTuoi()));
        txtluong.setText(en.format(em.getLuong()));
        txtemail.setText(em.getEmail());
        try {
            anh.setIcon(em.getHinhanh());
        } catch (Exception e) {

        }
    }

    private void showDetail(int x) {
        index = tbldata.getSelectedRow();
        Employee em = epy.get(x);
        txtmanv.setText(em.getManv());
        txthvt.setText(em.getHovaten());
        txttuoi.setText(String.valueOf(em.getTuoi()));
        txtluong.setText(en.format(em.getLuong()));
        txtemail.setText(em.getEmail());

        try {
            anh.setIcon(em.getHinhanh());
        } catch (Exception e) {

        }
    }

    public Employee getForm() {
        String luong = String.valueOf(txtluong.getText()).replace(",", "");
        luong.trim();
        Employee nv = new Employee(txtmanv.getText(), txthvt.getText(), txtemail.getText(),
                Double.parseDouble(luong), Integer.parseInt(txttuoi.getText()), (ImageIcon) anh.getIcon());
        return nv;
    }

    public boolean isValue2() {
        String ma = txtmanv.getText();
        String ten = txthvt.getText();
        String email = txtemail.getText();
        String luong = String.valueOf(txtluong.getText()).replace(",", "");
        luong.trim();
        String tuoi = String.valueOf(txttuoi.getText());
        tuoi.trim();
        String[] lstcheck = {ma, ten, tuoi, email, luong};
        for (String x : lstcheck) {
            if (!x.equalsIgnoreCase("")) {
                return true;
            }
        }
        return false;
    }

    public boolean isValuedate() {
        String ma = txtmanv.getText();
        String ten = txthvt.getText();
        String email = txtemail.getText();
        String luong = String.valueOf(txtluong.getText()).replace(",", "");
        luong.trim();
        String tuoi = String.valueOf(txttuoi.getText());
        tuoi.trim();
        String[] lstcheck = {ma, ten, tuoi, email, luong};
        boolean chk = true;
        String erol = "Bạn chưa nhập ";
        int idferol = -1, fist = 0;
        for (int i = 0; i < lstcheck.length; i++) {
            if (lstcheck[i].equalsIgnoreCase("") && i == 0) {
                if (chk == false) {
                    erol += ", ";
                }
                chk = false;
                if (chk == false) {
                    fist += 1;
                }
                erol += "Mã nhân viên";
                if (fist == 1) {
                    idferol = i;
                }

            } else if (lstcheck[i].equalsIgnoreCase("") && i == 1) {
                if (chk == false) {
                    erol += ", ";
                }
                chk = false;
                if (chk == false) {
                    fist += 1;
                }
                erol += "Họ và tên nhân viên";
                if (fist == 1) {
                    idferol = i;
                }

            } else if (lstcheck[i].equalsIgnoreCase("") && i == 2) {
                if (chk == false) {
                    erol += ", ";
                }
                chk = false;
                if (chk == false) {
                    fist += 1;
                }
                erol += "Tuổi";
                if (fist == 1) {
                    idferol = i;
                }

            } else if (lstcheck[i].equalsIgnoreCase("") && i == 3) {
                if (chk == false) {
                    erol += ", ";
                }
                chk = false;
                if (chk == false) {
                    fist += 1;
                }
                erol += "Email";
                if (fist == 1) {
                    idferol = i;
                }

            } else if (lstcheck[i].equalsIgnoreCase("") && i == 4) {
                if (chk == false) {
                    erol += ", ";
                }
                chk = false;
                if (chk == false) {
                    fist += 1;
                }
                erol += "Lương";
                if (fist == 1) {
                    idferol = i;
                }
            }
        }
        erol += " !";
        if (chk) {
            erol = "";
            String chke = "\\w+@\\w{3,8}+\\.+\\w{2,3}$";
            String chkt = "[^0-9]{3,30}";
            if (!ten.matches(chkt)) {
                JOptionPane.showMessageDialog(this,
                        "Vui lòng nhập tên từ 3 - 30 kí tự không có số", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                txthvt.requestFocus();
                return false;
            }
            try {
                Integer.parseInt(tuoi);
                if (Integer.parseInt(tuoi) <= 55 && Integer.parseInt(tuoi) >= 16) {

                } else {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập tuổi từ 16 đến 55 tuổi", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    txttuoi.setText("");
                    txttuoi.requestFocus();
                    return false;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập tuổi là số nguyên", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                txttuoi.setText("");
                txttuoi.requestFocus();
                return false;
            }
            if (!email.matches(chke)) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đúng định dạng email", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                txtemail.requestFocus();
                return false;
            }
            try {
                Double.parseDouble(luong);
                if (Double.parseDouble(luong) >= 5000000) {
                } else {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập lương lớn hơn 5 triệu", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    txtluong.setText("");
                    txtluong.requestFocus();
                    return false;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập lương là số", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                txtluong.setText("");
                txtluong.requestFocus();
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(this, erol, "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            if (idferol == 0) {
                txtmanv.requestFocus();
            } else if (idferol == 1) {
                txthvt.requestFocus();
            } else if (idferol == 2) {
                txttuoi.requestFocus();
            } else if (idferol == 3) {
                txtemail.requestFocus();
            } else if (idferol == 4) {
                txtluong.requestFocus();
            }
            return false;
        }
        return true;
    }

    public boolean isValue1() {
        String ma = txtmanv.getText();
        String ten = txthvt.getText();
        String email = txtemail.getText();
        String luong = String.valueOf(txtluong.getText());
        String tuoi = String.valueOf(txttuoi.getText());
        String[] lstcheck = {ma, ten, tuoi, email, luong};
        for (String x : lstcheck) {
            if (x.equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Vui lòng chọn Find hoặc chọn nhân viên trong list "
                        + "để hiện đầy đủ thông tin trước khi dùng chức năng", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        return true;
    }

    public void addEmployee() {
        DefaultTableModel model = (DefaultTableModel) tbldata.getModel();
        index = tbldata.getSelectedRow();
        if (isValuedate()) {
            Employee nv = getForm();
            if (index == -1) {
                if (findID(txtmanv.getText()) != -1) {
                    JOptionPane.showMessageDialog(this, "Mã nhân viên đã tồn tại không thể thêm", "Thêm nhân viên", JOptionPane.WARNING_MESSAGE);
                } else {
                    Object[] em = {nv.getManv(), nv.getHovaten(), nv.getTuoi(), nv.getEmail(), nv.getLuong(), nv.getHinhanh()};
                    model.addRow(em);
                    epy.add(nv);
                    JOptionPane.showMessageDialog(this, "Đã thêm nhân viên thành công", "Thêm nhân viên", JOptionPane.PLAIN_MESSAGE);
                    record();
                }
            } else {
                if (findID(txtmanv.getText()) != -1) {
                    JOptionPane.showMessageDialog(this, "Mã nhân viên đã tồn tại không thể thêm", "Thêm nhân viên", JOptionPane.WARNING_MESSAGE);
                } else {
                    Object[] em = {nv.getManv(), nv.getHovaten(), nv.getTuoi(), nv.getEmail(), nv.getLuong(), nv.getHinhanh()};
                    model.addRow(em);
                    epy.add(nv);
                    JOptionPane.showMessageDialog(this, "Đã thêm nhân viên thành công", "Thêm nhân viên", JOptionPane.PLAIN_MESSAGE);
                    record();
                }
            }
        }
    }

    public void updateEmployee() {
        index = tbldata.getSelectedRow();
        String luong = String.valueOf(txtluong.getText()).replace(",", "");
        luong.trim();
        DefaultTableModel model = (DefaultTableModel) tbldata.getModel();
        if (isValue1()) {
            if (isValuedate()) {
                if (index != -1) {
                    model.setValueAt(txtmanv.getText(), index, 0);
                    model.setValueAt(txthvt.getText(), index, 1);
                    model.setValueAt(Integer.parseInt(txttuoi.getText()), index, 2);
                    model.setValueAt(txtemail.getText(), index, 3);
                    model.setValueAt(Double.parseDouble(luong), index, 4);
                    epy.set(index, new Employee(txtmanv.getText(), txthvt.getText(),
                            txtemail.getText(), Double.parseDouble(luong), Integer.parseInt(txttuoi.getText()), (ImageIcon) anh.getIcon()));
                    JOptionPane.showMessageDialog(this, "Đã Update thành công", "Update nhân viên", JOptionPane.PLAIN_MESSAGE);
                    record();
                } else {
                    if (isValue1()) {
                        if (findID(txtmanv.getText()) == -1) {
                            JOptionPane.showMessageDialog(this, "Nhân viên không tồn tại, vui lòng chọn lại nhân viên để nâng cấp", "Update nhân viên", JOptionPane.WARNING_MESSAGE);
                        } else {
                            model.setValueAt(txtmanv.getText(), findID(txtmanv.getText()), 0);
                            model.setValueAt(txthvt.getText(), findID(txtmanv.getText()), 1);
                            model.setValueAt(Integer.parseInt(txttuoi.getText()), findID(txtmanv.getText()), 2);
                            model.setValueAt(txtemail.getText(), findID(txtmanv.getText()), 3);
                            model.setValueAt(Double.parseDouble(luong), findID(txtmanv.getText()), 4);
                            epy.set(findID(txtmanv.getText()), new Employee(txtmanv.getText(), txthvt.getText(),
                                    txtemail.getText(), Double.parseDouble(luong), Integer.parseInt(txttuoi.getText()), (ImageIcon) anh.getIcon()));
                            JOptionPane.showMessageDialog(this, "Đã Update thành công", "Update nhân viên", JOptionPane.PLAIN_MESSAGE);
                            record();
                        }
                    }
                }
            }
        }
    }

    private void removeEmployee() {
        index = tbldata.getSelectedRow();
        String id = txtmanv.getText();
        id.trim();
        DefaultTableModel model = (DefaultTableModel) tbldata.getModel();
        if (index != -1) {
            showDetail(index);
            int result = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa nhân viên này không", "Cảnh báo", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {

                model.removeRow(index);
                epy.remove(index);
                clearForm();
                JOptionPane.showMessageDialog(this, "Đã xóa nhân viên thành công");
                record();
            }
        } else {
            if (id.equals("")) {
                String text = JOptionPane.showInputDialog(this, "Nhập mã nhân viên cần xóa", "Xóa nhân viên", JOptionPane.OK_CANCEL_OPTION);
                if (text != null) {
                    if (!text.equals("")) {
                        if (findID(text) == -1) {
                            JOptionPane.showMessageDialog(this, "Mã nhân viên bạn tìm không có", "Xóa nhân viên", JOptionPane.ERROR_MESSAGE);
                        } else {
                            showDetail(findID(text));
                            int result = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa nhân viên này không", "Cảnh báo", JOptionPane.OK_CANCEL_OPTION);
                            if (result == JOptionPane.OK_OPTION) {
                                model.removeRow(findID(text));
                                epy.remove(findID(text));
                                clearForm();
                                tbldata.getSelectionModel().clearSelection();
                                JOptionPane.showMessageDialog(this, "Xóa thành công nhân viên có mã " + text, "Xóa nhân viên", JOptionPane.WARNING_MESSAGE);
                                record();
                            }

                        }
                    }
                }
            } else {
                if (findID(txtmanv.getText()) == -1) {
                    JOptionPane.showMessageDialog(this, "Mã nhân viên bạn tìm không có", "Xóa nhân viên", JOptionPane.ERROR_MESSAGE);
                } else {
                    showDetail(findID(txtmanv.getText()));
                    int result = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa nhân viên này không", "Cảnh báo", JOptionPane.OK_CANCEL_OPTION);
                    if (result == JOptionPane.OK_OPTION) {
                        model.removeRow(findID(txtmanv.getText()));
                        epy.remove(findID(txtmanv.getText()));
                        clearForm();
                        tbldata.getSelectionModel().clearSelection();
                        JOptionPane.showMessageDialog(this, "Đã xóa nhân viên thành công", "Xóa nhân viên", JOptionPane.ERROR_MESSAGE);
                        record();

                    }
                }
            }
        }
    }

    private int findID(String ID) {
        DefaultTableModel model = (DefaultTableModel) tbldata.getModel();
        for (Employee x : epy) {
            if (ID.equalsIgnoreCase(x.manv)) {
//                tbldata.getSelectionModel().clearSelection();
                tbldata.setRowSelectionInterval(epy.indexOf(x), epy.indexOf(x));
                return epy.indexOf(x);
            }
        }
        tbldata.getSelectionModel().clearSelection();
        return -1;
    }

    private void clearForm() {
        txtmanv.setText("");
        txthvt.setText("");
        txttuoi.setText("");
        txtluong.setText("");
        txtemail.setText("");
        anh.setIcon(null);
    }

    public void left() {
        index = findID(txtmanv.getText()) - 1;
        if (index < 0) {
            index = epy.size() - 1;
            showDetail(index);
        } else {
            showDetail(index);
        }
        record();
    }

    public void endleft() {
        index = findID(txtmanv.getText());
        if (index != 0) {
            index = 0;
            showDetail(index);
        } else {
            JOptionPane.showMessageDialog(this, "Đã đến đầu danh sách", "Thông báo", JOptionPane.PLAIN_MESSAGE);
        }
        record();
    }

    public void right() {
        index = findID(txtmanv.getText()) + 1;
        if (index > epy.size() - 1) {
            index = 0;
            showDetail(index);
        } else {
            showDetail(index);
        }
        record();
    }

    public void endright() {
        index = findID(txtmanv.getText());
        if (index != epy.size() - 1) {
            index = epy.size() - 1;
            showDetail(index);
        } else {
            JOptionPane.showMessageDialog(this, "Đã đến cuối danh sách", "Thông báo", JOptionPane.PLAIN_MESSAGE);
        }
        record();
    }

    public void record() {
        index = findID(txtmanv.getText());
        int size = epy.size();
        if (index != -1) {
            labrecord.setText(String.valueOf(index + 1) + " of " + String.valueOf(size));
        } else {
            labrecord.setText("0 of " + String.valueOf(size));
        }
    }

    public static Object docOb(String link) {

        try {
            FileInputStream file = new FileInputStream(link);
            ObjectInputStream ois = new ObjectInputStream(file);
            Object ob = ois.readObject();
            ois.close();
            file.close();
            return ob;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static void ghiOb(String link, Object ob) {
        try {
            FileOutputStream file = new FileOutputStream(link);
            ObjectOutputStream oos = new ObjectOutputStream(file);
            oos.writeObject(ob);
            oos.close();
            file.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void orderBy(String x) {
        if (x.equalsIgnoreCase("ten")) {
            if (cbsx.getSelectedIndex() == 0) {
                Comparator<Employee> com = new Comparator<Employee>() {
                    @Override
                    public int compare(Employee o1, Employee o2) {
                        return o1.hovaten.compareTo(o2.hovaten);
                    }
                };
                Collections.sort(epy, com);
            } else {
                Comparator<Employee> com = new Comparator<Employee>() {
                    @Override
                    public int compare(Employee o1, Employee o2) {
                        return o2.hovaten.compareTo(o1.hovaten);
                    }
                };
                Collections.sort(epy, com);
            }
        } else if (x.equalsIgnoreCase("luong")) {
            if (cbsx.getSelectedIndex() == 0) {
                Comparator<Employee> com = new Comparator<Employee>() {
                    @Override
                    public int compare(Employee o1, Employee o2) {
                        Double x1 = o1.getLuong();
                        Double x2 = o2.getLuong();
                        return x1.compareTo(x2);
                    }
                };
                Collections.sort(epy, com);
            } else {
                Comparator<Employee> com = new Comparator<Employee>() {
                    @Override
                    public int compare(Employee o1, Employee o2) {
                        Double x1 = o1.getLuong();
                        Double x2 = o2.getLuong();
                        return x2.compareTo(x1);
                    }
                };
                Collections.sort(epy, com);
            }
        }
    }

}
